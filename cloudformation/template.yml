AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Custom Lambdas for Cost-Optimisation

Globals:
  Function:
    Timeout: 300
    Runtime: python3.8

Resources:
  ServicesCostOptimisationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Services-Cost-Optimisation-Topic

  ALBRedirectionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ALBRedirectionLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:CreateRule
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:CreateListener 
                  - elasticloadbalancing:DescribeRules
                  - ec2:DescribeSecurityGroupRules   
                  - ec2:AuthorizeSecurityGroupIngress 
                  - sns:Publish
                Resource: '*'

  ALBRedirectionLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt ALBRedirectionLambdaExecutionRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/ALBRedirection/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesCostOptimisationTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)

    
  CloudwatchLogGroupRetentionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogGroupRetentionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - logs:DescribeLogGroups
                  - logs:PutRetentionPolicy
                  - sns:Publish
                Resource: '*'

  CloudwatchLogGroupRetentionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CloudwatchLogGroupRetentionRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/CloudwatchLogGroupRetention/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesCostOptimisationTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(4 days)